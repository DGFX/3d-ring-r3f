/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useMemo } from "react";
import { useGLTF, Caustics, MeshRefractionMaterial } from "@react-three/drei";
import { useControls } from 'leva'
import { RGBELoader } from 'three-stdlib'
import { useLoader } from "@react-three/fiber";


export default function ExampleRing(props) {
    const { nodes, materials } = useGLTF("/ring-random.glb");
    const diamondTexture = useLoader(RGBELoader, 'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr')

    const diamondConfig = useMemo(() => {
        return {
            bounces: { value: 3, min: 0, max: 8, step: 1 },
            aberrationStrength: { value: 0.01, min: 0.01, max: 0.1, step: 0.01 },
            ior: { value: 2.75, min: 0, max: 10 },
            fresnel: { value: 1, min: 0, max: 1 },
            color: 'white',
            // fastChroma: false
        }
    }, [])

    const ringConfig = useMemo(() => {
        return {
            x: { value: 0, min: -6, max: 6, step: .1 },
            y: { value: 0, min: -6, max: 6, step: .1 },
            z: { value: 0, min: 0, max: 6, step: .1 },
        }
    }, [])

    const diamondControls = useControls("Kryształy", diamondConfig)
    const ringControls = useControls("Pierścionek", ringConfig)
    const ref = useRef()
    console.log(ref)
    return (
        <group {...props} dispose={null}>
            <mesh
                ref={ref}
                {...ringConfig}
                name="Ring"
                castShadow
                receiveShadow
                geometry={nodes.Ring.geometry}
                material={materials["White Gold"]}
                position={[ringControls.x, ringControls.y, ringControls.z]}
            >
                <mesh
                    name="Diamond_Holder"
                    castShadow
                    receiveShadow
                    geometry={nodes.Diamond_Holder.geometry}
                    material={materials["White Gold"]}
                />
                <mesh
                    name="Diamonds"
                    // castShadow
                    // receiveShadow
                    geometry={nodes.Diamonds.geometry}
                // material={materials.Diamond}
                >
                    <MeshRefractionMaterial envMap={diamondTexture} {...diamondControls} fastChroma={false} toneMapped={false} />
                </mesh>
            </mesh>
        </group>
    );
}

useGLTF.preload("/ring-random.glb");
