/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 jebany-ring.glb -d -k
*/

import React, { useRef, useMemo } from "react";
import { useGLTF, Caustics, MeshRefractionMaterial, AccumulativeShadows, RandomizedLight, useCubeTexture } from "@react-three/drei";
import { useControls } from 'leva'
import { RGBELoader } from 'three-stdlib'
import { useLoader } from "@react-three/fiber";

export default function OlszarRing(props) {
  const { nodes, materials } = useGLTF('/olszar-ring.glb')

  const diamondTexture = useLoader(RGBELoader, 'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr')

  // Ring Enviroment Map
  const envTexture = useCubeTexture(["px.png", "nx.png", "py.png", "ny.png", "pz.png", "nz.png"], { path: "ring/" })

  // Diamond Controls
  const diamondConfig = useMemo(() => {
    return {
      bounces: { value: 3, min: 0, max: 8, step: 1 },
      aberrationStrength: { value: 0.01, min: 0.01, max: 0.1, step: 0.01 },
      ior: { value: 2.75, min: 0, max: 10 },
      fresnel: { value: 1, min: 0, max: 1 },
      color: '#56ccff',
      // fastChroma: false
    }
  }, [])

  // Ring Controls
  /**
   * Mesh Basic Material
   */
  const ringConfig = useMemo(() => {
    return {
      x: { value: 0, min: -6, max: 6, step: .1 },
      y: { value: 0, min: -6, max: 6, step: .1 },
      z: { value: 0, min: 0, max: 6, step: .1 },
      // color: "#d4af37",
      // reflectivity: { value: 0.5, min: 0, max: 1, step: .1 }
    }
  }, [])
  const diamondControls = useControls("Kryształy", diamondConfig)
  const ringControls = useControls("Pierścionek", ringConfig)

  // /**
  //  * Mesh Standard Material
  //  */
  const { metalness, roughness, color } = useControls("Kolor Pierścionka", {
    metalness: { value: 1.08, min: 0, max: 2, step: .01 },
    roughness: { value: 0.16, min: 0, max: 1, step: .01 },
    color: "white"
  });


  return (
    <group {...props} dispose={null}>
      <mesh name="kamienie-boczne" geometry={nodes['kamienie-boczne'].geometry} material={nodes['kamienie-boczne'].material}>
        {/* <MeshRefractionMaterial envMap={diamondTexture} {...diamondControls} fastChroma={false} toneMapped={false} /> */}
        <meshStandardMaterial metalness={metalness} envMap={envTexture} roughness={roughness} color={color} />
      </mesh>
      <mesh name="kamień-centralny" geometry={nodes['kamień-centralny'].geometry} material={nodes['kamień-centralny'].material}>
        <MeshRefractionMaterial envMap={diamondTexture} {...diamondControls} fastChroma={false} toneMapped={false} />
      </mesh>
      <mesh name="oprawa" geometry={nodes.oprawa.geometry} material={nodes.oprawa.material}>
        <meshStandardMaterial metalness={metalness} envMap={envTexture} roughness={roughness} color={color} />
      </mesh>
      <mesh name="szyna" geometry={nodes.szyna.geometry} material={nodes.szyna.material}>
        <meshStandardMaterial metalness={metalness} envMap={envTexture} roughness={roughness} color={color} />
      </mesh>
      {/* <AccumulativeShadows temporal frames={100} alphaTest={0.95} opacity={1} scale={20}>
        <RandomizedLight amount={8} radius={10} ambient={0.5} position={[0, 10, -2.5]} bias={0.001} size={3} />
      </AccumulativeShadows> */}
    </group>
  )
}

useGLTF.preload('/olszar-ring.glb')
