/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 jebany-ring.glb -d -k
*/

import React, { useRef, useMemo, useState } from "react";
import { useGLTF, Caustics, MeshRefractionMaterial, AccumulativeShadows, RandomizedLight, useCubeTexture } from "@react-three/drei";
import { useControls } from 'leva'
import { RGBELoader } from 'three-stdlib'
import { useLoader } from "@react-three/fiber";
import { BrowserView, MobileView, isBrowser, isMobile } from 'react-device-detect';

export default function OlszarRing(props) {
  // const [isMobile, setIsMobile] = useState(false)

  const { nodes, materials } = useGLTF('/olszar-ring.glb')

  const diamondTexture = useLoader(RGBELoader, 'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr')

  // Ring Enviroment Map
  const envTexture = useCubeTexture(["px.png", "nx.png", "py.png", "ny.png", "pz.png", "nz.png"], { path: "ring/" })

  // Diamond Controls
  const diamondConfig = useMemo(() => {
    return {
      bounces: { value: 3, min: 0, max: 8, step: 1 },
      aberrationStrength: { value: 0.01, min: 0.01, max: 0.1, step: 0.01 },
      ior: { value: 2.75, min: 0, max: 10 },
      fresnel: { value: 1, min: 0, max: 1 },
      color: '#56ccff',
      // fastChroma: false
    }
  }, [])

  // Diamond Mobile Controls
  const diamondMobileConfig = useMemo(() => {
    return {
      metalness: { value: 0, min: 0, max: 8, step: .5 },
      roughness: { value: 0, min: 0, max: 1, step: .01 },
      ior: { value: 1.58, min: 0, max: 10 },
      transmission: { value: 0.9, min: 0, max: 1, step: 0.01 },
      color: '#73f4ff',
      // fastChroma: false
    }
  }, [])

  // Ring Position Controls
  const ringPositionConfig = useMemo(() => {
    return {
      x: { value: 0, min: -6, max: 6, step: .1 },
      y: { value: 0, min: -6, max: 6, step: .1 },
      z: { value: 0, min: 0, max: 6, step: .1 },
      // color: "#d4af37",
      // reflectivity: { value: 0.5, min: 0, max: 1, step: .1 }
    }
  }, [])

  // /**
  //  * Ring Material Controls
  //  */
  const ringMaterialConfig = useMemo(() => {
    return {
      metalness: { value: 1.08, min: 0, max: 2, step: .01 },
      roughness: { value: 0.16, min: 0, max: 1, step: .01 },
      color: "white"
    }
  });

  const mobileConfig = useMemo(() => {
    return {
      mobile: isMobile,
    }
  });

  const diamondControls = useControls("Kryształ", diamondConfig)
  const diamondMobileControls = useControls("Kryształ na telefonie", diamondMobileConfig)
  // const ringPositionControls = useControls("Pierścionek", ringPositionConfig)
  const ringMaterialControls = useControls("Pierścionek", ringMaterialConfig)
  const mobileControls = useControls("Wersja", mobileConfig)



  return (
    <group {...props} dispose={null}>
      <mesh name="kamienie-boczne" geometry={nodes['kamienie-boczne'].geometry} material={nodes['kamienie-boczne'].material}>
        {mobileControls.mobile
          ? <meshPhysicalMaterial envMap={envTexture} {...diamondMobileControls} />
          : <MeshRefractionMaterial envMap={diamondTexture} {...diamondControls} fastChroma={false} toneMapped={false} />
        }
      </mesh>
      <mesh name="kamień-centralny" geometry={nodes['kamień-centralny'].geometry} material={nodes['kamień-centralny'].material}>
        {mobileControls.mobile
          ? <meshPhysicalMaterial envMap={envTexture} {...diamondMobileControls} />
          : <MeshRefractionMaterial envMap={diamondTexture} {...diamondControls} fastChroma={false} toneMapped={false} />
        }
      </mesh>
      <mesh name="oprawa" geometry={nodes.oprawa.geometry} material={nodes.oprawa.material}>
        <meshPhysicalMaterial {...ringMaterialControls} />
      </mesh>
      <mesh name="szyna" geometry={nodes.szyna.geometry} material={nodes.szyna.material}>
        <meshPhysicalMaterial {...ringMaterialControls} />
      </mesh>
      {/* <AccumulativeShadows temporal frames={100} alphaTest={0.95} opacity={1} scale={20}>
        <RandomizedLight amount={8} radius={10} ambient={0.5} position={[0, 10, -2.5]} bias={0.001} size={3} />
      </AccumulativeShadows> */}
    </group>
  )
}

useGLTF.preload('/olszar-ring.glb')
